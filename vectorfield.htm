<style>

* {
    margin: 0;
    padding: 0;
}

canvas {
    position: fixed;
    width: 100%;
    height: 100%;
}

</style>
<canvas></canvas>
<script src="libs/common.js"></script>
<script src="libs/dat.gui.min.js"></script>
<script src="libs/hammer.min.js"></script>
<script src="libs/perlin.js"></script>
<script>

const settings = {
    cells: 20,
    showVectorField: true,
    showGridLines: false,
    showColours: false,
    scale: 0.003,
    timeScale: 0.2,
    amount: 1,
    maxSpeed: 100,
    trailColour: '#ff0000'
};

const canvas = document.querySelector('canvas');
const context = canvas.getContext('2d');

const trailCanvas = document.createElement('canvas');
const trailContext = trailCanvas.getContext('2d');

function resize() {
    canvas.width = trailCanvas.width = window.innerWidth;
    canvas.height = trailCanvas.height = window.innerHeight;
}
window.onresize = resize;
resize();

let actors = [];
let lastFrameTime = null;
let totalTime = 0;

function getNoise(p, t) {
    return noise.simplex3(p.x * settings.scale, p.y * settings.scale, t * settings.timeScale);
}

function getNoiseVector(p, t) {
    return vec(
        noise.simplex3(p.x * settings.scale, p.y * settings.scale, t * settings.timeScale),
        noise.simplex3((p.x + 38929) * settings.scale, (p.y + 89147) * settings.scale, t * settings.timeScale)
    );
}

class CellGrid {
    static draw(context) {
        const s = Math.floor(window.innerWidth / settings.cells);
        const h = Math.floor(window.innerHeight / s);
        for (let x = 0, ix = 0; ix <= window.innerWidth + s * 2; x++, ix += s) {
            for (let y = 0, iy = 0; iy <= window.innerHeight + s * 2; y++, iy += s) {
                this.drawCell(context, x, y, s);
            }
        }
    }

    static drawCell(context, x, y, s) {
        context.save();
        context.translate(x * s, y * s);
        context.scale(s, s);

        const v = getNoiseVector(vec.mul(vec(x, y), s), totalTime);

        if (settings.showColours) {
            context.fillStyle = `rgb(${Math.floor((v.x * 0.5 + 0.5) * 255)}, ${Math.floor((v.y * 0.5 + 0.5) * 255)}, 0)`;
            context.fillRect(0, 0, 1, 1);
        }

        if (settings.showGridLines) {
            context.lineWidth = 2 / s;
            context.strokeStyle = 'black';
            context.strokeRect(0, 0, 1, 1);
        }
        
        if (settings.showVectorField) {
            context.translate(0.5, 0.5);
            context.scale(0.5, 0.5);
            context.beginPath();
            context.moveTo(0, 0);
            context.lineTo(v.x, v.y);
            context.lineWidth = 4 / s;
            context.strokeStyle = settings.showColours ? 'white' : 'red';
            context.stroke();
        }
        context.restore();
    }
}

class Particle {
    position = null;
    velocity = null;
    disposed = false;
    previousPosition = null;

    constructor(position) {
        this.position = position;
        this.previousPosition = vec(position);
        this.velocity = vec();
    }

    update(elapsedTime) {
        const acceleration = getNoiseVector(this.position, totalTime);
        this.velocity = vec.add(this.velocity, vec.mul(acceleration, settings.amount));
        if (vec.len(this.velocity) > settings.maxSpeed) {
            this.velocity = vec.mul(vec.nor(this.velocity), settings.maxSpeed);
        }
        this.previousPosition = vec(this.position);
        this.position = vec.add(this.position, vec.mul(this.velocity, elapsedTime));
        if (this.position.x < 0 || this.position.x > window.innerWidth || this.position.y < 0 || this.position.y > window.innerHeight) {
            this.disposed = true;
        }
    }

    draw(context) {
        context.save();
        context.translate(this.position.x, this.position.y);
        context.fillStyle = 'black';
        context.beginPath();
        context.moveTo(0, 0);
        context.arc(0, 0, 4, 0, Math.PI * 2);
        context.fill();
        context.restore();

        trailContext.save();
        trailContext.lineWidth = 2;
        trailContext.strokeStyle = settings.trailColour;
        trailContext.globalAlpha = Math.clamp(vec.len(this.velocity) / settings.maxSpeed);
        trailContext.beginPath();
        trailContext.moveTo(this.previousPosition.x, this.previousPosition.y);
        trailContext.lineTo(this.position.x, this.position.y);
        trailContext.stroke();
        trailContext.restore();
    }
}

function init() {
    noise.seed('hello');
    lastFrameTime = performance.now();
    loop();
}
init();

function loop() {
    const now = performance.now();
    const elapsedTime = (now - lastFrameTime) / 1000;
    lastFrameTime = now;
    totalTime += elapsedTime;
    update(elapsedTime);
    draw();
    window.requestAnimationFrame(loop);
}

function update(elapsedTime) {
    for (let actor of actors) {
        actor.update(elapsedTime);
    }
    actors = actors.filter(actor => !actor.disposed);
}

function draw() {
    context.clearRect(0, 0, window.innerWidth, window.innerHeight);
    context.drawImage(trailCanvas, 0, 0);
    CellGrid.draw(context);
    for (let actor of actors) {
        actor.draw(context);
    }
}

// DAT GUI
const gui = new dat.GUI();
gui.add(settings, 'cells', 2, 100, 1);
gui.add(settings, 'showVectorField');
gui.add(settings, 'showGridLines');
gui.add(settings, 'showColours');
gui.add(settings, 'scale', 0.0001, 0.015, 0.0001);
gui.add(settings, 'timeScale', 0, 1, 0.05);
gui.add(settings, 'amount', 0, 1);
gui.add(settings, 'maxSpeed', 0, 500, 1);
gui.addColor(settings, 'trailColour');

// Input
function debounce(func, wait, immediate) {
    var timeout;
    return function() {
        var context = this, args = arguments;
        var later = function() {
            timeout = null;
            if (!immediate) func.apply(context, args);
        };
        var callNow = immediate && !timeout;
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
        if (callNow) func.apply(context, args);
    };
};
const debounceDraw = debounce(draw, 200);
const hammer = new Hammer.Manager(canvas, { recognizers: [[Hammer.Tap], [Hammer.Pan]] });
hammer.on('tap', function(e) {
    actors.push(new Particle(e.center));
});
hammer.on("pan", function(e) {
    actors.push(new Particle(e.center));
});
window.addEventListener("keydown", function(e) {
    // console.log(e.key);
    switch (e.key) {
        default: break;
    }
});

</script>
