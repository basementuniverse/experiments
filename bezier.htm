<style>

canvas {
    width: 800px;
    height: 800px;
    border: 1px black solid;
    margin: 2em;
}

</style>
<canvas></canvas>
<script src="libs/common.js"></script>
<script src="libs/dat.gui.min.js"></script>
<script>

const canvas = document.querySelector('canvas');
const context = canvas.getContext('2d');
canvas.width = canvas.height = 800;

const settings = {
    n: 100,
    order: 3
};

const gui = new dat.GUI();
gui.add(settings, 'n', 5, 100).onChange(draw);
gui.add(settings, 'order', 1, 3).step(1).onChange(draw);

const points = [];
canvas.onclick = e => {
    points.push(vec(e.offsetX, e.offsetY));
    draw();
};

function draw() {
    const m = settings.order + 1;
    context.clearRect(0, 0, 800, 800);
    if (points.length >= settings.order) {
        for (let i = 0; i + m <= points.length; i += settings.order) {
            drawSegment(points.slice(i, i + m));
        }
    }
    for (let i = 0; i < points.length; i++) {
        dot(points[i], (i % settings.order) ? 'red' : 'green', 4);
    }
}

const m = [
    [-1, 1, 1, 0],
    [1, -2, 1, -2, 2, 0, 1, 0, 0],
    [-1, 3, -3, 1, 3, -6, 3, 0, -3, 3, 0, 0, 1, 0, 0, 0]
];

function tm(t) {
    switch (settings.order) {
        case 1: return [t, 1];
        case 2: return [t * t, t, 1];
        case 3: return [t * t * t, t * t, t, 1];
    }
}

function drawSegment(points) {
    for (let t = 0; t <= 1; t += 1 / settings.n) {
        const q = matrix_multiply(m[settings.order - 1], tm(t), settings.order + 1);
        let p = vec();
        for (let i = 0; i < settings.order + 1; i++) {
            p = vec.add(p, vec.mul(points[i], q[i]));
        }
        dot(p, 'rgba(0, 0, 0, 0.4)');
    }
}

// Dot product of a nxn matrix and a nx1 matrix
function matrix_multiply(a, b, n) {
    const result = [];
    for (let i = 0; i < n; i++) {
        let t = 0;
        for (let j = 0; j < n; j++) {
            t += a[i + j * n] * b[j];
        }
        result.push(t);
    }
    return result;
}

function dot(p, c, r = 2) {
    context.save();
    context.translate(p.x, p.y);
    context.beginPath();
    context.arc(0, 0, r, 0, Math.PI * 2);
    context.fillStyle = c;
    context.fill();
    context.restore();
}

</script>
